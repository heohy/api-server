{"ast":null,"code":"import axios from 'axios';\nexport async function SignUpValidate(state) {\n  const errMessage = [];\n  let signup_validate = true;\n  let id_duplicate = true;\n  await axios.post(\"http://127.0.0.1:5000/signup_validate\", {\n    username: state.username\n  }).then(res => {\n    id_duplicate = res.data[0]['confirm'];\n    console.log(id_duplicate);\n  }).catch(err => {\n    console.log(err);\n  }); // 아이디 무결성 검사\n\n  if (state.username === \"\") {\n    errMessage.push(\"아이디를 입력해주세요.\");\n  } else if (id_duplicate === false) {\n    errMessage.push(\"이미 존재하는 아이디입니다.\");\n  } // 비밀번호 무결성 검사\n\n\n  if (state.password1 !== state.password2) {\n    errMessage.push(\"패스워드가 일치하지 않습니다.\");\n  } else if (!/^[a-zA-Z0-9]{8,20}$/.test(state.password1)) {\n    errMessage.push(\"비밀번호는 숫자와 영문자 조합으로 8~20자리를 사용해야 합니다.\");\n  } else if (state.password1.search(/[0-9]/g) < 0 || state.password1.search(/[a-z]/ig) < 0) {\n    errMessage.push(\"비밀번호는 숫자와 영문자를 혼용하여야 합니다.\");\n  } // 이름 무결성 검사\n\n\n  if (state.name === \"\") {\n    errMessage.push(\"이름을 입력해주세요.\");\n  } // 성별 무결성 검사\n\n\n  if (state.gender === \"\") {\n    errMessage.push(\"성별을 입력해주세요.\");\n  } // 생일 무결성 검사\n\n\n  if (state.birth === \"\") {\n    errMessage.push(\"생일을 입력해주세요.\");\n  }\n\n  if (errMessage.length > 0) {\n    signup_validate = false;\n  }\n\n  return {\n    validate: signup_validate,\n    errorMessage: errMessage\n  };\n}\n_c = SignUpValidate;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpValidate\");","map":{"version":3,"sources":["C:/Users/heohy/Desktop/Project/api-server/react-server/src/lib/SignUpValidate.js"],"names":["axios","SignUpValidate","state","errMessage","signup_validate","id_duplicate","post","username","then","res","data","console","log","catch","err","push","password1","password2","test","search","name","gender","birth","length","validate","errorMessage"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,eAAeC,cAAf,CAA8BC,KAA9B,EAAqC;AACxC,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAIC,YAAY,GAAG,IAAnB;AAEA,QAAML,KAAK,CAACM,IAAN,CAAW,uCAAX,EAAoD;AACtDC,IAAAA,QAAQ,EAAEL,KAAK,CAACK;AADsC,GAApD,EAEHC,IAFG,CAEGC,GAAD,IAAS;AACbJ,IAAAA,YAAY,GAAGI,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAY,SAAZ,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACH,GALK,EAKHQ,KALG,CAKIC,GAAD,IAAS;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACH,GAPK,CAAN,CALwC,CAcxC;;AACA,MAAIZ,KAAK,CAACK,QAAN,KAAmB,EAAvB,EAA2B;AAAEJ,IAAAA,UAAU,CAACY,IAAX,CAAgB,cAAhB;AAAkC,GAA/D,MACK,IAAIV,YAAY,KAAK,KAArB,EAA4B;AAAEF,IAAAA,UAAU,CAACY,IAAX,CAAgB,iBAAhB;AAAqC,GAhBhC,CAkBxC;;;AACA,MAAIb,KAAK,CAACc,SAAN,KAAoBd,KAAK,CAACe,SAA9B,EAAyC;AAAEd,IAAAA,UAAU,CAACY,IAAX,CAAgB,kBAAhB;AAAsC,GAAjF,MACK,IAAI,CAAC,sBAAsBG,IAAtB,CAA2BhB,KAAK,CAACc,SAAjC,CAAL,EAAkD;AAAEb,IAAAA,UAAU,CAACY,IAAX,CAAgB,sCAAhB;AAA0D,GAA9G,MACA,IAAIb,KAAK,CAACc,SAAN,CAAgBG,MAAhB,CAAuB,QAAvB,IAAmC,CAAnC,IAAwCjB,KAAK,CAACc,SAAN,CAAgBG,MAAhB,CAAuB,SAAvB,IAAoC,CAAhF,EAAmF;AACpFhB,IAAAA,UAAU,CAACY,IAAX,CAAgB,2BAAhB;AACH,GAvBuC,CAyBxC;;;AACA,MAAIb,KAAK,CAACkB,IAAN,KAAe,EAAnB,EAAuB;AAAEjB,IAAAA,UAAU,CAACY,IAAX,CAAgB,aAAhB;AAAiC,GA1BlB,CA4BxC;;;AACA,MAAIb,KAAK,CAACmB,MAAN,KAAiB,EAArB,EAAyB;AAAElB,IAAAA,UAAU,CAACY,IAAX,CAAgB,aAAhB;AAAiC,GA7BpB,CA+BxC;;;AACA,MAAIb,KAAK,CAACoB,KAAN,KAAgB,EAApB,EAAwB;AAAEnB,IAAAA,UAAU,CAACY,IAAX,CAAgB,aAAhB;AAAiC;;AAE3D,MAAIZ,UAAU,CAACoB,MAAX,GAAoB,CAAxB,EAA2B;AAAEnB,IAAAA,eAAe,GAAG,KAAlB;AAA0B;;AAEvD,SAAQ;AACJoB,IAAAA,QAAQ,EAAEpB,eADN;AAEJqB,IAAAA,YAAY,EAAEtB;AAFV,GAAR;AAIH;KAxCqBF,c","sourcesContent":["import axios from 'axios';\r\n\r\nexport async function SignUpValidate(state) {\r\n    const errMessage = [];\r\n    let signup_validate = true;\r\n    let id_duplicate = true;\r\n\r\n    await axios.post(\"http://127.0.0.1:5000/signup_validate\", {\r\n        username: state.username\r\n    }).then((res) => {\r\n        id_duplicate = res.data[0]['confirm']\r\n        console.log(id_duplicate)\r\n    }).catch((err) => {\r\n        console.log(err)\r\n    })\r\n\r\n    // 아이디 무결성 검사\r\n    if (state.username === \"\") { errMessage.push(\"아이디를 입력해주세요.\"); }\r\n    else if (id_duplicate === false) { errMessage.push(\"이미 존재하는 아이디입니다.\"); }\r\n\r\n    // 비밀번호 무결성 검사\r\n    if (state.password1 !== state.password2) { errMessage.push(\"패스워드가 일치하지 않습니다.\"); }\r\n    else if (!/^[a-zA-Z0-9]{8,20}$/.test(state.password1)) { errMessage.push(\"비밀번호는 숫자와 영문자 조합으로 8~20자리를 사용해야 합니다.\"); }\r\n    else if (state.password1.search(/[0-9]/g) < 0 || state.password1.search(/[a-z]/ig) < 0) {\r\n        errMessage.push(\"비밀번호는 숫자와 영문자를 혼용하여야 합니다.\");\r\n    }\r\n\r\n    // 이름 무결성 검사\r\n    if (state.name === \"\") { errMessage.push(\"이름을 입력해주세요.\"); }\r\n\r\n    // 성별 무결성 검사\r\n    if (state.gender === \"\") { errMessage.push(\"성별을 입력해주세요.\"); }\r\n    \r\n    // 생일 무결성 검사\r\n    if (state.birth === \"\") { errMessage.push(\"생일을 입력해주세요.\"); }\r\n\r\n    if (errMessage.length > 0) { signup_validate = false; }\r\n\r\n    return ({\r\n        validate: signup_validate,\r\n        errorMessage: errMessage\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}